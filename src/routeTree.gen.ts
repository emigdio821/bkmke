/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as ApiOgInfoRouteImport } from './routes/api/og-info'
import { Route as ApiOgImgRouteImport } from './routes/api/og-img'
import { Route as AuthenticatedSettingsRouteImport } from './routes/_authenticated/settings'
import { Route as AuthenticatedFavoritesRouteImport } from './routes/_authenticated/favorites'
import { Route as AuthenticatedTagsTagIdRouteImport } from './routes/_authenticated/tags.$tagId'
import { Route as AuthenticatedFoldersFolderIdRouteImport } from './routes/_authenticated/folders.$folderId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const ApiOgInfoRoute = ApiOgInfoRouteImport.update({
  id: '/api/og-info',
  path: '/api/og-info',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiOgImgRoute = ApiOgImgRouteImport.update({
  id: '/api/og-img',
  path: '/api/og-img',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedSettingsRoute = AuthenticatedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedFavoritesRoute = AuthenticatedFavoritesRouteImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedTagsTagIdRoute = AuthenticatedTagsTagIdRouteImport.update({
  id: '/tags/$tagId',
  path: '/tags/$tagId',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedFoldersFolderIdRoute =
  AuthenticatedFoldersFolderIdRouteImport.update({
    id: '/folders/$folderId',
    path: '/folders/$folderId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/favorites': typeof AuthenticatedFavoritesRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/api/og-img': typeof ApiOgImgRoute
  '/api/og-info': typeof ApiOgInfoRoute
  '/': typeof AuthenticatedIndexRoute
  '/folders/$folderId': typeof AuthenticatedFoldersFolderIdRoute
  '/tags/$tagId': typeof AuthenticatedTagsTagIdRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/favorites': typeof AuthenticatedFavoritesRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/api/og-img': typeof ApiOgImgRoute
  '/api/og-info': typeof ApiOgInfoRoute
  '/': typeof AuthenticatedIndexRoute
  '/folders/$folderId': typeof AuthenticatedFoldersFolderIdRoute
  '/tags/$tagId': typeof AuthenticatedTagsTagIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/favorites': typeof AuthenticatedFavoritesRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRoute
  '/api/og-img': typeof ApiOgImgRoute
  '/api/og-info': typeof ApiOgInfoRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/folders/$folderId': typeof AuthenticatedFoldersFolderIdRoute
  '/_authenticated/tags/$tagId': typeof AuthenticatedTagsTagIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/favorites'
    | '/settings'
    | '/api/og-img'
    | '/api/og-info'
    | '/'
    | '/folders/$folderId'
    | '/tags/$tagId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/favorites'
    | '/settings'
    | '/api/og-img'
    | '/api/og-info'
    | '/'
    | '/folders/$folderId'
    | '/tags/$tagId'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/favorites'
    | '/_authenticated/settings'
    | '/api/og-img'
    | '/api/og-info'
    | '/_authenticated/'
    | '/_authenticated/folders/$folderId'
    | '/_authenticated/tags/$tagId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  ApiOgImgRoute: typeof ApiOgImgRoute
  ApiOgInfoRoute: typeof ApiOgInfoRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/api/og-info': {
      id: '/api/og-info'
      path: '/api/og-info'
      fullPath: '/api/og-info'
      preLoaderRoute: typeof ApiOgInfoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/og-img': {
      id: '/api/og-img'
      path: '/api/og-img'
      fullPath: '/api/og-img'
      preLoaderRoute: typeof ApiOgImgRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/favorites': {
      id: '/_authenticated/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof AuthenticatedFavoritesRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/tags/$tagId': {
      id: '/_authenticated/tags/$tagId'
      path: '/tags/$tagId'
      fullPath: '/tags/$tagId'
      preLoaderRoute: typeof AuthenticatedTagsTagIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/folders/$folderId': {
      id: '/_authenticated/folders/$folderId'
      path: '/folders/$folderId'
      fullPath: '/folders/$folderId'
      preLoaderRoute: typeof AuthenticatedFoldersFolderIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedFavoritesRoute: typeof AuthenticatedFavoritesRoute
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedFoldersFolderIdRoute: typeof AuthenticatedFoldersFolderIdRoute
  AuthenticatedTagsTagIdRoute: typeof AuthenticatedTagsTagIdRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedFavoritesRoute: AuthenticatedFavoritesRoute,
  AuthenticatedSettingsRoute: AuthenticatedSettingsRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedFoldersFolderIdRoute: AuthenticatedFoldersFolderIdRoute,
  AuthenticatedTagsTagIdRoute: AuthenticatedTagsTagIdRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  ApiOgImgRoute: ApiOgImgRoute,
  ApiOgInfoRoute: ApiOgInfoRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
